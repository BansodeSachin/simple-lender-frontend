{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let ChangePasswordComponent = class ChangePasswordComponent {\n  constructor(router, authService, toastr, formBuilder) {\n    this.router = router;\n    this.authService = authService;\n    this.toastr = toastr;\n    this.formBuilder = formBuilder;\n    this.currentUser = JSON.parse(localStorage.getItem('current_user') || \"\");\n    this.username = '';\n    this.currentPassword = '';\n    this.newPassword = '';\n    this.confirmNewPassword = '';\n    this.errorMessage = '';\n  }\n  ngOnInit() {\n    this.userForm = this.formBuilder.group({\n      username: [this.currentUser.username, Validators.required],\n      currentPassword: ['', Validators.required],\n      newPassword: ['', Validators.required],\n      confirmNewPassword: ['', Validators.required]\n    });\n  }\n  changePassword() {\n    this.onSignIn(this.username, this.currentPassword, this.newPassword, this.confirmNewPassword);\n    const success = false;\n    this.authService.changePassword(this.username.trim(), this.currentPassword.trim(), this.newPassword.trim(), this.confirmNewPassword.trim()).subscribe({\n      next: response => {\n        if (response && response.accessToken) {\n          // Store the token in local storage\n          localStorage.setItem('current_user', JSON.stringify(response));\n          localStorage.setItem('access_token', response.accessToken);\n          // Navigate to the dashboard\n          this.router.navigate(['/employees']);\n        } else this.errorMessage = 'Invalid username or password';\n      },\n      error: error => {\n        console.log(error);\n        this.errorMessage = 'Invalid username or password';\n      },\n      complete: () => console.info('complete')\n    });\n  }\n  home() {\n    // Redirect to the login page after logout\n    this.router.navigate(['/employees']);\n  }\n  logout() {\n    // Clear the access token from localStorage or perform any other logout actions\n    localStorage.removeItem('access_token');\n    // Redirect to the login page after logout\n    this.router.navigate(['/login']);\n  }\n};\nChangePasswordComponent = __decorate([Component({\n  selector: 'app-change-password',\n  templateUrl: './change-password.component.html',\n  styleUrls: ['./change-password.component.css']\n})], ChangePasswordComponent);","map":{"version":3,"names":["Component","Validators","ChangePasswordComponent","constructor","router","authService","toastr","formBuilder","currentUser","JSON","parse","localStorage","getItem","username","currentPassword","newPassword","confirmNewPassword","errorMessage","ngOnInit","userForm","group","required","changePassword","onSignIn","success","trim","subscribe","next","response","accessToken","setItem","stringify","navigate","error","console","log","complete","info","home","logout","removeItem","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\MSUSERSL123\\Desktop\\New Notes\\Angular-Spring Boot Project\\angular-frontend\\src\\app\\change-password\\change-password.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { AuthService } from './../services/auth.service';\n\n@Component({\n  selector: 'app-change-password',\n  templateUrl: './change-password.component.html',\n  styleUrls: ['./change-password.component.css']\n})\nexport class ChangePasswordComponent {\n\n  userForm!: FormGroup;\n\n  private readonly currentUser = JSON.parse(localStorage.getItem('current_user') || \"\");\n\n  public username: string = '';\n  public currentPassword: string = '';\n  public newPassword: string = '';\n  public confirmNewPassword: string = '';\n  public errorMessage: string = '';\n\n  constructor(private router: Router, private authService: AuthService, private toastr: ToastrService, private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n\n    this.userForm = this.formBuilder.group({\n      username: [this.currentUser.username, Validators.required],\n      currentPassword: ['', Validators.required],\n      newPassword: ['', Validators.required],\n      confirmNewPassword: ['', Validators.required],\n    });\n  }\n\n  changePassword(): void {\n\n    this.onSignIn(this.username, this.currentPassword, this.newPassword, this.confirmNewPassword);\n\n    const success = false;\n\n    this.authService.changePassword(this.username.trim(), this.currentPassword.trim(), this.newPassword.trim(), this.confirmNewPassword.trim()).subscribe({\n      next: response => {\n        if (response && response.accessToken) {\n          // Store the token in local storage\n          localStorage.setItem('current_user', JSON.stringify(response));\n          localStorage.setItem('access_token', response.accessToken);\n          // Navigate to the dashboard\n          this.router.navigate(['/employees']);\n        } else\n          this.errorMessage = 'Invalid username or password';\n      }, error: error => {\n        console.log(error);\n        this.errorMessage = 'Invalid username or password';\n      },\n      complete: () => console.info('complete')\n    });\n  }\n\n  home(): void {\n    // Redirect to the login page after logout\n    this.router.navigate(['/employees']);\n  }\n\n  logout(): void {\n    // Clear the access token from localStorage or perform any other logout actions\n    localStorage.removeItem('access_token');\n\n    // Redirect to the login page after logout\n    this.router.navigate(['/login']);\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}