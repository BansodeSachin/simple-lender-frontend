{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TransactionService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.accessToken = localStorage.getItem('access_token');\n    this.baseURL = \"http://localhost:8082/api/records\";\n  }\n  getTransactionList(recordId) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${this.accessToken}`\n    });\n    return this.httpClient.get(`${this.baseURL}/${recordId}/transactions`, {\n      headers\n    });\n  }\n  createTransaction(recordId, record) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${this.accessToken}`\n    });\n    return this.httpClient.post(`${this.baseURL}/${recordId}/transactions`, record, {\n      headers\n    });\n  }\n  getTransactionById(recordId, id) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${this.accessToken}`\n    });\n    return this.httpClient.get(`${this.baseURL}/${recordId}/transactions/${id}`, {\n      headers\n    });\n  }\n  updateTransaction(recordId, id, record) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${this.accessToken}`\n    });\n    return this.httpClient.put(`${this.baseURL}/${recordId}/transactions`, record, {\n      headers\n    });\n  }\n  deleteTransaction(recordId, id) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${this.accessToken}`\n    });\n    return this.httpClient.delete(`${this.baseURL}/${recordId}/transactions/${id}`, {\n      headers\n    });\n  }\n  static #_ = this.ɵfac = function TransactionService_Factory(t) {\n    return new (t || TransactionService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TransactionService,\n    factory: TransactionService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","TransactionService","constructor","httpClient","accessToken","localStorage","getItem","baseURL","getTransactionList","recordId","headers","get","createTransaction","record","post","getTransactionById","id","updateTransaction","put","deleteTransaction","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\MSUSERSL123\\Desktop\\New Notes\\Angular-Spring Boot Project\\angular-frontend\\src\\app\\transaction.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Transaction } from './transaction.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransactionService {\n\n  private readonly accessToken = localStorage.getItem('access_token');\n  private baseURL = \"http://localhost:8082/api/records\";\n\n  constructor(private httpClient: HttpClient) { }\n\n  getTransactionList(recordId: number): Observable<Transaction[]>{\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${this.accessToken}`\n    });\n    return this.httpClient.get<Transaction[]>(`${this.baseURL}/${recordId}/transactions`, { headers });\n  }\n\n  createTransaction(recordId: number, record: Transaction): Observable<Object>{\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${this.accessToken}`\n    });\n    return this.httpClient.post(`${this.baseURL}/${recordId}/transactions`, record, { headers });\n  }\n\n  getTransactionById(recordId: number, id: number): Observable<Transaction>{\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${this.accessToken}`\n    });\n    return this.httpClient.get<Transaction>(`${this.baseURL}/${recordId}/transactions/${id}`, { headers });\n  }\n\n  updateTransaction(recordId: number, id: number, record: Transaction): Observable<Object>{\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${this.accessToken}`\n    });\n    return this.httpClient.put(`${this.baseURL}/${recordId}/transactions`, record, { headers });\n  }\n\n  deleteTransaction(recordId: number, id: number): Observable<Object>{\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${this.accessToken}`\n    });\n    return this.httpClient.delete(`${this.baseURL}/${recordId}/transactions/${id}`, { headers });\n  }\n}\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAQ9D,OAAM,MAAOC,kBAAkB;EAK7BC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAHb,KAAAC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAC3D,KAAAC,OAAO,GAAG,mCAAmC;EAEP;EAE9CC,kBAAkBA,CAACC,QAAgB;IACjC,MAAMC,OAAO,GAAG,IAAIV,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAU,IAAI,CAACI,WAAW;KAC5C,CAAC;IACF,OAAO,IAAI,CAACD,UAAU,CAACQ,GAAG,CAAgB,GAAG,IAAI,CAACJ,OAAO,IAAIE,QAAQ,eAAe,EAAE;MAAEC;IAAO,CAAE,CAAC;EACpG;EAEAE,iBAAiBA,CAACH,QAAgB,EAAEI,MAAmB;IACrD,MAAMH,OAAO,GAAG,IAAIV,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAU,IAAI,CAACI,WAAW;KAC5C,CAAC;IACF,OAAO,IAAI,CAACD,UAAU,CAACW,IAAI,CAAC,GAAG,IAAI,CAACP,OAAO,IAAIE,QAAQ,eAAe,EAAEI,MAAM,EAAE;MAAEH;IAAO,CAAE,CAAC;EAC9F;EAEAK,kBAAkBA,CAACN,QAAgB,EAAEO,EAAU;IAC7C,MAAMN,OAAO,GAAG,IAAIV,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAU,IAAI,CAACI,WAAW;KAC5C,CAAC;IACF,OAAO,IAAI,CAACD,UAAU,CAACQ,GAAG,CAAc,GAAG,IAAI,CAACJ,OAAO,IAAIE,QAAQ,iBAAiBO,EAAE,EAAE,EAAE;MAAEN;IAAO,CAAE,CAAC;EACxG;EAEAO,iBAAiBA,CAACR,QAAgB,EAAEO,EAAU,EAAEH,MAAmB;IACjE,MAAMH,OAAO,GAAG,IAAIV,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAU,IAAI,CAACI,WAAW;KAC5C,CAAC;IACF,OAAO,IAAI,CAACD,UAAU,CAACe,GAAG,CAAC,GAAG,IAAI,CAACX,OAAO,IAAIE,QAAQ,eAAe,EAAEI,MAAM,EAAE;MAAEH;IAAO,CAAE,CAAC;EAC7F;EAEAS,iBAAiBA,CAACV,QAAgB,EAAEO,EAAU;IAC5C,MAAMN,OAAO,GAAG,IAAIV,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAU,IAAI,CAACI,WAAW;KAC5C,CAAC;IACF,OAAO,IAAI,CAACD,UAAU,CAACiB,MAAM,CAAC,GAAG,IAAI,CAACb,OAAO,IAAIE,QAAQ,iBAAiBO,EAAE,EAAE,EAAE;MAAEN;IAAO,CAAE,CAAC;EAC9F;EAAC,QAAAW,CAAA,G;qBA7CUpB,kBAAkB,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAlBzB,kBAAkB;IAAA0B,OAAA,EAAlB1B,kBAAkB,CAAA2B,IAAA;IAAAC,UAAA,EAFjB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}