{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ChangePasswordComponent = class ChangePasswordComponent {\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n    this.username = '';\n    this.password = '';\n    this.errorMessage = '';\n  }\n  login() {\n    this.onSignIn(this.username, this.password);\n    // For simplicity, let's check if the username is 'test' and password is 'password'\n    /*if (this.username === 'test' && this.password === 'password') {\n           // Mocking the receipt of an access token from the server\n      const accessToken = 'eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzdXNhbiIsImlhdCI6MTcwMTkzNTIxNiwiZXhwIjoxNzAyMDIxNjE2fQ.RbHdmv_d_X0yphdHDweNP464RcDmMrcqWKMEjdZtF9cLBZzO4pQP18aGAmBUQyZ-EFFKZFCjHp9cml98e4EisQ';\n      \n      // Storing the access token in localStorage\n      localStorage.setItem('access_token', accessToken);\n           // Redirect to the dashboard on successful login\n      this.router.navigate(['/employees']);\n    } else {\n      this.errorMessage = 'Invalid username or password';\n    }*/\n  }\n\n  onSignIn(username, password) {\n    const success = false;\n    this.authService.signIn(username.trim(), password.trim()).subscribe({\n      next: response => {\n        if (response && response.accessToken) {\n          // Store the token in local storage\n          localStorage.setItem('current_user', JSON.stringify(response));\n          localStorage.setItem('access_token', response.accessToken);\n          // Navigate to the dashboard\n          this.router.navigate(['/employees']);\n        } else this.errorMessage = 'Invalid username or password';\n      },\n      error: error => {\n        console.log(error);\n        this.errorMessage = 'Invalid username or password';\n      },\n      complete: () => console.info('complete')\n    });\n  }\n};\nChangePasswordComponent = __decorate([Component({\n  selector: 'app-change-password',\n  templateUrl: './change-password.component.html',\n  styleUrls: ['./change-password.component.css']\n})], ChangePasswordComponent);","map":{"version":3,"names":["Component","ChangePasswordComponent","constructor","router","authService","username","password","errorMessage","login","onSignIn","success","signIn","trim","subscribe","next","response","accessToken","localStorage","setItem","JSON","stringify","navigate","error","console","log","complete","info","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\MSUSERSL123\\Desktop\\New Notes\\Angular-Spring Boot Project\\angular-frontend\\src\\app\\change-password\\change-password.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-change-password',\n  templateUrl: './change-password.component.html',\n  styleUrls: ['./change-password.component.css']\n})\nexport class ChangePasswordComponent {\n\n  public username: string = '';\n  public password: string = '';\n  public errorMessage: string = '';\n\n  constructor(private router: Router, private authService: AuthService) {}\n\n  login(): void {\n\n    this.onSignIn(this.username, this.password);\n\n    // For simplicity, let's check if the username is 'test' and password is 'password'\n    /*if (this.username === 'test' && this.password === 'password') {\n\n      // Mocking the receipt of an access token from the server\n      const accessToken = 'eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzdXNhbiIsImlhdCI6MTcwMTkzNTIxNiwiZXhwIjoxNzAyMDIxNjE2fQ.RbHdmv_d_X0yphdHDweNP464RcDmMrcqWKMEjdZtF9cLBZzO4pQP18aGAmBUQyZ-EFFKZFCjHp9cml98e4EisQ';\n      \n      // Storing the access token in localStorage\n      localStorage.setItem('access_token', accessToken);\n\n      // Redirect to the dashboard on successful login\n      this.router.navigate(['/employees']);\n    } else {\n      this.errorMessage = 'Invalid username or password';\n    }*/\n  }\n\n\n  onSignIn(username: string, password: string): void {\n    const success = false;\n\n    this.authService.signIn(username.trim(), password.trim()).subscribe({\n      next: response => {\n        if (response && response.accessToken) {\n          // Store the token in local storage\n          localStorage.setItem('current_user', JSON.stringify(response));\n          localStorage.setItem('access_token', response.accessToken);\n          // Navigate to the dashboard\n          this.router.navigate(['/employees']);\n        } else\n          this.errorMessage = 'Invalid username or password';\n      }, error: error => {\n        console.log(error);\n        this.errorMessage = 'Invalid username or password';\n      },\n      complete: () => console.info('complete')\n    });\n    \n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAOlC,WAAMC,uBAAuB,GAA7B,MAAMA,uBAAuB;EAMlCC,YAAoBC,MAAc,EAAUC,WAAwB;IAAhD,KAAAD,MAAM,GAANA,MAAM;IAAkB,KAAAC,WAAW,GAAXA,WAAW;IAJhD,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,YAAY,GAAW,EAAE;EAEuC;EAEvEC,KAAKA,CAAA;IAEH,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACJ,QAAQ,EAAE,IAAI,CAACC,QAAQ,CAAC;IAE3C;IACA;;;;;;;;;;;EAaF;;EAGAG,QAAQA,CAACJ,QAAgB,EAAEC,QAAgB;IACzC,MAAMI,OAAO,GAAG,KAAK;IAErB,IAAI,CAACN,WAAW,CAACO,MAAM,CAACN,QAAQ,CAACO,IAAI,EAAE,EAAEN,QAAQ,CAACM,IAAI,EAAE,CAAC,CAACC,SAAS,CAAC;MAClEC,IAAI,EAAEC,QAAQ,IAAG;QACf,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,WAAW,EAAE;UACpC;UACAC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ,CAAC,CAAC;UAC9DE,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEH,QAAQ,CAACC,WAAW,CAAC;UAC1D;UACA,IAAI,CAACb,MAAM,CAACkB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;SACrC,MACC,IAAI,CAACd,YAAY,GAAG,8BAA8B;MACtD,CAAC;MAAEe,KAAK,EAAEA,KAAK,IAAG;QAChBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAClB,IAAI,CAACf,YAAY,GAAG,8BAA8B;MACpD,CAAC;MACDkB,QAAQ,EAAEA,CAAA,KAAMF,OAAO,CAACG,IAAI,CAAC,UAAU;KACxC,CAAC;EAEJ;CAED;AAnDYzB,uBAAuB,GAAA0B,UAAA,EALnC3B,SAAS,CAAC;EACT4B,QAAQ,EAAE,qBAAqB;EAC/BC,WAAW,EAAE,kCAAkC;EAC/CC,SAAS,EAAE,CAAC,iCAAiC;CAC9C,CAAC,C,EACW7B,uBAAuB,CAmDnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}