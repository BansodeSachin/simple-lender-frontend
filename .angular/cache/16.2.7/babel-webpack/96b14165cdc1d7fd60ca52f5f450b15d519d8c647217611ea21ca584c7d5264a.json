{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let DashboardComponent = class DashboardComponent {\n  constructor(employeeService, router, borrowerService) {\n    this.employeeService = employeeService;\n    this.router = router;\n    this.borrowerService = borrowerService;\n    this.currentUser = JSON.parse(localStorage.getItem('current_user') || \"\").username;\n    this.totalAmount = 0;\n    this.totalPrincipal = 0;\n    this.totalInterest = 0;\n  }\n  calculateTotals() {\n    // Example: Assume employees have properties amount, principal, and interest\n    //const employees = this.borrowerService.getEmployees(); // Replace with your service method\n    //this.totalAmount = employees.reduce((sum, employee) => sum + employee.amount, 0);\n    //this.totalPrincipal = employees.reduce((sum, employee) => sum + employee.principal, 0);\n    //this.totalInterest = employees.reduce((sum, employee) => sum + employee.interest, 0);\n    this.totalAmount = 10000;\n    this.totalPrincipal = 8500;\n    this.totalInterest = 1500;\n  }\n  home() {\n    // Redirect to the login page after logout\n    this.router.navigate(['/employees']);\n  }\n  logout() {\n    // Clear the access token from localStorage or perform any other logout actions\n    localStorage.removeItem('access_token');\n    // Redirect to the login page after logout\n    this.router.navigate(['/login']);\n  }\n  changePassword() {\n    // Implement the logic for changing the password\n    console.log('Change Password clicked');\n    this.router.navigate(['/change-password']);\n  }\n  ngOnInit() {\n    this.getEmployees();\n    // Fetch data or calculate totals from your service\n    this.calculateTotals();\n  }\n  getEmployees() {\n    this.employeeService.getEmployeeList().subscribe(data => {\n      this.employees = data;\n    });\n  }\n  employeeDetails(id) {\n    this.router.navigate(['employee-details', id]);\n  }\n  addEmployee() {\n    this.router.navigate(['create-employee']);\n  }\n  updateEmployee(id) {\n    this.router.navigate(['update-employee', id]);\n  }\n  deleteEmployee(id) {\n    this.employeeService.deleteEmployee(id).subscribe(data => {\n      console.log(data);\n      this.getEmployees();\n    });\n    window.location.reload();\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})], DashboardComponent);","map":{"version":3,"names":["Component","DashboardComponent","constructor","employeeService","router","borrowerService","currentUser","JSON","parse","localStorage","getItem","username","totalAmount","totalPrincipal","totalInterest","calculateTotals","home","navigate","logout","removeItem","changePassword","console","log","ngOnInit","getEmployees","getEmployeeList","subscribe","data","employees","employeeDetails","id","addEmployee","updateEmployee","deleteEmployee","window","location","reload","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\MSUSERSL123\\Desktop\\New Notes\\Angular-Spring Boot Project\\angular-frontend\\src\\app\\dashboard\\dashboard.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Employee } from '../employee';\nimport { EmployeeService } from '../employee.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent {\n\n  employees!: Employee[];\n\n  currentUser: string = JSON.parse(localStorage.getItem('current_user') || \"\").username;\n\n  constructor(private employeeService: EmployeeService,\n    private router: Router, private borrowerService: BorrowerService) {\n\n  }\n\n  totalAmount: number = 0;\n  totalPrincipal: number = 0;\n  totalInterest: number = 0;\n\n\n  calculateTotals(): void {\n    // Example: Assume employees have properties amount, principal, and interest\n    //const employees = this.borrowerService.getEmployees(); // Replace with your service method\n\n    //this.totalAmount = employees.reduce((sum, employee) => sum + employee.amount, 0);\n    //this.totalPrincipal = employees.reduce((sum, employee) => sum + employee.principal, 0);\n    //this.totalInterest = employees.reduce((sum, employee) => sum + employee.interest, 0);\n    this.totalAmount = 10000;\n    this.totalPrincipal = 8500;\n    this.totalInterest = 1500;\n  }\n\n  home(): void {\n    // Redirect to the login page after logout\n    this.router.navigate(['/employees']);\n  }\n\n  logout(): void {\n    // Clear the access token from localStorage or perform any other logout actions\n    localStorage.removeItem('access_token');\n\n    // Redirect to the login page after logout\n    this.router.navigate(['/login']);\n  }\n\n  changePassword(): void {\n    // Implement the logic for changing the password\n    console.log('Change Password clicked');\n    this.router.navigate(['/change-password']);\n  }\n\n  ngOnInit(): void {\n    this.getEmployees();\n    // Fetch data or calculate totals from your service\n    this.calculateTotals();\n  }\n\n  private getEmployees() {\n    this.employeeService.getEmployeeList().subscribe(data => {\n      this.employees = data;\n    });\n  }\n\n  employeeDetails(id: number){\n    this.router.navigate(['employee-details', id]);\n  }\n\n  addEmployee(){\n    this.router.navigate(['create-employee']);\n  }\n\n  updateEmployee(id: number){\n    this.router.navigate(['update-employee', id]);\n  }\n\n  deleteEmployee(id: number){\n    this.employeeService.deleteEmployee(id).subscribe( data => {\n      console.log(data);\n      this.getEmployees();\n    })\n    window.location.reload();\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAUlC,WAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAM7BC,YAAoBC,eAAgC,EAC1CC,MAAc,EAAUC,eAAgC;IAD9C,KAAAF,eAAe,GAAfA,eAAe;IACzB,KAAAC,MAAM,GAANA,MAAM;IAAkB,KAAAC,eAAe,GAAfA,eAAe;IAHjD,KAAAC,WAAW,GAAWC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,CAACC,QAAQ;IAOrF,KAAAC,WAAW,GAAW,CAAC;IACvB,KAAAC,cAAc,GAAW,CAAC;IAC1B,KAAAC,aAAa,GAAW,CAAC;EAJzB;EAOAC,eAAeA,CAAA;IACb;IACA;IAEA;IACA;IACA;IACA,IAAI,CAACH,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,aAAa,GAAG,IAAI;EAC3B;EAEAE,IAAIA,CAAA;IACF;IACA,IAAI,CAACZ,MAAM,CAACa,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;EACtC;EAEAC,MAAMA,CAAA;IACJ;IACAT,YAAY,CAACU,UAAU,CAAC,cAAc,CAAC;IAEvC;IACA,IAAI,CAACf,MAAM,CAACa,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEAG,cAAcA,CAAA;IACZ;IACAC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtC,IAAI,CAAClB,MAAM,CAACa,QAAQ,CAAC,CAAC,kBAAkB,CAAC,CAAC;EAC5C;EAEAM,QAAQA,CAAA;IACN,IAAI,CAACC,YAAY,EAAE;IACnB;IACA,IAAI,CAACT,eAAe,EAAE;EACxB;EAEQS,YAAYA,CAAA;IAClB,IAAI,CAACrB,eAAe,CAACsB,eAAe,EAAE,CAACC,SAAS,CAACC,IAAI,IAAG;MACtD,IAAI,CAACC,SAAS,GAAGD,IAAI;IACvB,CAAC,CAAC;EACJ;EAEAE,eAAeA,CAACC,EAAU;IACxB,IAAI,CAAC1B,MAAM,CAACa,QAAQ,CAAC,CAAC,kBAAkB,EAAEa,EAAE,CAAC,CAAC;EAChD;EAEAC,WAAWA,CAAA;IACT,IAAI,CAAC3B,MAAM,CAACa,QAAQ,CAAC,CAAC,iBAAiB,CAAC,CAAC;EAC3C;EAEAe,cAAcA,CAACF,EAAU;IACvB,IAAI,CAAC1B,MAAM,CAACa,QAAQ,CAAC,CAAC,iBAAiB,EAAEa,EAAE,CAAC,CAAC;EAC/C;EAEAG,cAAcA,CAACH,EAAU;IACvB,IAAI,CAAC3B,eAAe,CAAC8B,cAAc,CAACH,EAAE,CAAC,CAACJ,SAAS,CAAEC,IAAI,IAAG;MACxDN,OAAO,CAACC,GAAG,CAACK,IAAI,CAAC;MACjB,IAAI,CAACH,YAAY,EAAE;IACrB,CAAC,CAAC;IACFU,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;EAC1B;CACD;AA9EYnC,kBAAkB,GAAAoC,UAAA,EAL9BrC,SAAS,CAAC;EACTsC,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,C,EACWvC,kBAAkB,CA8E9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}