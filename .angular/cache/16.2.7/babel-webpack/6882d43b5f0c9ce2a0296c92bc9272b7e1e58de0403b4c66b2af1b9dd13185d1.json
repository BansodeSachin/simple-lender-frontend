{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { AppConfig } from '../app-config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.loginApi = AppConfig.loginApi;\n    this.userSignupApi = AppConfig.signupApi;\n    this.changePWDApi = AppConfig.changePWDApi;\n    this.headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n  }\n  login(email, password) {\n    const url = this.loginApi; // Get the API URL from AppConfig\n    const body = {\n      email,\n      password\n    }; // Create the request body with username and password\n    return this.http.post(url, body); // Send the POST request to the API endpoint\n  }\n\n  signIn(username, password) {\n    const body = {\n      username,\n      password\n    };\n    return this.http.post(this.loginApi, body, {\n      headers: this.headers\n    });\n  }\n  signOut() {\n    // Clear user information and token from local storage\n    localStorage.removeItem('access_token');\n    // Navigate the user to the login page\n    this.router.navigate(['/login']);\n  }\n  getUserRole() {\n    let currentUser = JSON.parse(localStorage.getItem('current_user') || \"\");\n    if (currentUser && currentUser.roles) return currentUser.roles;else return \"\";\n  }\n  getToken() {\n    return localStorage.getItem('access_token');\n  }\n  isLoggedIn() {\n    const token = this.getToken();\n    return token != null;\n  }\n  // User Signup\n  signup(user) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.http.post(this.userSignupApi, user, {\n      headers\n    });\n  }\n  // User change pwd\n  changePassword(pwdData) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.http.post(this.changePWDApi, pwdData, {\n      headers\n    });\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","AppConfig","AuthService","constructor","http","router","loginApi","userSignupApi","signupApi","changePWDApi","headers","login","email","password","url","body","post","signIn","username","signOut","localStorage","removeItem","navigate","getUserRole","currentUser","JSON","parse","getItem","roles","getToken","isLoggedIn","token","signup","user","changePassword","pwdData","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\MSUSERSL123\\Desktop\\New Notes\\Angular-Spring Boot Project\\angular-frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, map } from 'rxjs';\nimport { AppConfig } from '../app-config';\nimport { Router } from '@angular/router';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private readonly loginApi: string = AppConfig.loginApi;\n  private readonly userSignupApi: string = AppConfig.signupApi;\n  private readonly changePWDApi: string = AppConfig.changePWDApi;\n  private headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n  constructor(private http: HttpClient, private router: Router) { }\n\n  login(email: string, password: string): Observable<any> {\n    const url = this.loginApi; // Get the API URL from AppConfig\n    const body = { email, password }; // Create the request body with username and password\n    return this.http.post(url, body); // Send the POST request to the API endpoint\n  }\n\n  signIn(username: string, password: string): Observable<any> {\n    const body = { username, password };\n    return this.http.post<any>(this.loginApi, body, { headers: this.headers });\n  }\n\n  signOut(): void {\n    // Clear user information and token from local storage\n    localStorage.removeItem('access_token');\n\n    // Navigate the user to the login page\n    this.router.navigate(['/login']);\n  }\n\n  getUserRole(): string {\n    let currentUser = JSON.parse(localStorage.getItem('current_user') || \"\");\n\n    if (currentUser && currentUser.roles)\n      return currentUser.roles;\n    else\n      return \"\";\n  }\n\n  getToken(): string {\n    return localStorage.getItem('access_token') as any;\n  }\n\n  isLoggedIn(): boolean {\n    const token = this.getToken();\n    return token != null;\n  }\n\n  // User Signup\n  signup(user: any): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http.post(this.userSignupApi, user, { headers });\n  }\n\n  // User change pwd\n  changePassword(pwdData: any): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n\n    return this.http.post(this.changePWDApi, pwdData, { headers });\n  }\n\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,SAAS,QAAQ,eAAe;;;;AAOzC,OAAM,MAAOC,WAAW;EAOtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IALnC,KAAAC,QAAQ,GAAWL,SAAS,CAACK,QAAQ;IACrC,KAAAC,aAAa,GAAWN,SAAS,CAACO,SAAS;IAC3C,KAAAC,YAAY,GAAWR,SAAS,CAACQ,YAAY;IACtD,KAAAC,OAAO,GAAG,IAAIV,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;EAET;EAEhEW,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC,MAAMC,GAAG,GAAG,IAAI,CAACR,QAAQ,CAAC,CAAC;IAC3B,MAAMS,IAAI,GAAG;MAAEH,KAAK;MAAEC;IAAQ,CAAE,CAAC,CAAC;IAClC,OAAO,IAAI,CAACT,IAAI,CAACY,IAAI,CAACF,GAAG,EAAEC,IAAI,CAAC,CAAC,CAAC;EACpC;;EAEAE,MAAMA,CAACC,QAAgB,EAAEL,QAAgB;IACvC,MAAME,IAAI,GAAG;MAAEG,QAAQ;MAAEL;IAAQ,CAAE;IACnC,OAAO,IAAI,CAACT,IAAI,CAACY,IAAI,CAAM,IAAI,CAACV,QAAQ,EAAES,IAAI,EAAE;MAAEL,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;EAC5E;EAEAS,OAAOA,CAAA;IACL;IACAC,YAAY,CAACC,UAAU,CAAC,cAAc,CAAC;IAEvC;IACA,IAAI,CAAChB,MAAM,CAACiB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEAC,WAAWA,CAAA;IACT,IAAIC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACN,YAAY,CAACO,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;IAExE,IAAIH,WAAW,IAAIA,WAAW,CAACI,KAAK,EAClC,OAAOJ,WAAW,CAACI,KAAK,CAAC,KAEzB,OAAO,EAAE;EACb;EAEAC,QAAQA,CAAA;IACN,OAAOT,YAAY,CAACO,OAAO,CAAC,cAAc,CAAQ;EACpD;EAEAG,UAAUA,CAAA;IACR,MAAMC,KAAK,GAAG,IAAI,CAACF,QAAQ,EAAE;IAC7B,OAAOE,KAAK,IAAI,IAAI;EACtB;EAEA;EACAC,MAAMA,CAACC,IAAS;IACd,MAAMvB,OAAO,GAAG,IAAIV,WAAW,CAAC;MAC9B,cAAc,EAAE;KACjB,CAAC;IAEF,OAAO,IAAI,CAACI,IAAI,CAACY,IAAI,CAAC,IAAI,CAACT,aAAa,EAAE0B,IAAI,EAAE;MAAEvB;IAAO,CAAE,CAAC;EAC9D;EAEA;EACAwB,cAAcA,CAACC,OAAY;IACzB,MAAMzB,OAAO,GAAG,IAAIV,WAAW,CAAC;MAC9B,cAAc,EAAE;KACjB,CAAC;IAEF,OAAO,IAAI,CAACI,IAAI,CAACY,IAAI,CAAC,IAAI,CAACP,YAAY,EAAE0B,OAAO,EAAE;MAAEzB;IAAO,CAAE,CAAC;EAChE;EAAC,QAAA0B,CAAA,G;qBA9DUlC,WAAW,EAAAmC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXzC,WAAW;IAAA0C,OAAA,EAAX1C,WAAW,CAAA2C,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}